import React, { useState } from "react";
import Tooltip from "../components/Tooltip";
import NormsSection from "../components/NormsSection";

const voltageOptions = ["230V", "400V", "230V/400V", "12V", "24V"];
const revisionTypes = ["V√Ωchoz√≠", "Pravideln√°", "Mimo≈ô√°dn√°"];
const networkTypes = ["TN-C", "TN-S", "TN-C-S", "TT", "IT"];

const protectionOptions = {
  basic: [
    { label: "Z√°kladn√≠ izolace", tooltip: "Izolace ≈æiv√Ωch ƒç√°st√≠, kter√° br√°n√≠ p≈ô√≠m√©mu dotyku." },
    { label: "P≈ôep√°≈æky a kryty", tooltip: "Fyzick√© bari√©ry k ≈æiv√Ωm ƒç√°stem." },
    { label: "Z√°brany", tooltip: "Br√°n√≠ ne√∫mysln√©mu dotyku." },
    { label: "Ochrana polohou", tooltip: "≈Ωiv√© ƒç√°sti nejsou bƒõ≈ænƒõ p≈ô√≠stupn√©." },
    { label: "Omezen√≠ napƒõt√≠ (ELV)", tooltip: "Napƒõt√≠ sn√≠≈æeno na bezpeƒçnou √∫rove≈à." },
    { label: "Omezen√≠ proudu", tooltip: "Omezov√°n√≠ proudu a n√°boje p≈ôi dotyku." },
    { label: "≈ò√≠zen√≠ potenci√°lu", tooltip: "Vyrovn√°n√≠ potenci√°lu mezi ƒç√°stmi." },
  ],
  fault: [
    { label: "Automatick√© odpojen√≠ od zdroje", tooltip: "Odpojen√≠ p≈ôi poru≈°e zabr√°n√≠ dotykov√©mu napƒõt√≠." },
    { label: "Ochrann√© pospojov√°n√≠", tooltip: "Spojen√≠ v≈°ech ne≈æiv√Ωch ƒç√°st√≠ a uzemnƒõn√≠." },
    { label: "Elektrick√© oddƒõlen√≠", tooltip: "Izolace obvodu od zemƒõ a jin√Ωch obvod≈Ø." },
    { label: "P≈ô√≠davn√° izolace", tooltip: "Druh√° vrstva izolace." },
    { label: "Ochrann√© st√≠nƒõn√≠", tooltip: "Kovov√Ω kryt nebo s√≠≈• proti ru≈°en√≠." },
    { label: "Nevodiv√© okol√≠", tooltip: "Pou≈æit√© materi√°ly s n√≠zkou vodivost√≠." },
  ],
  additional: [
    { label: "Proudov√© chr√°niƒçe (RCD)", tooltip: "Vyp√≠n√° obvod p≈ôi rozd√≠lu proudu." },
    { label: "Dopl≈àuj√≠c√≠ pospojov√°n√≠", tooltip: "Spojuje vodiv√© ƒç√°sti v m√≠stnosti kv≈Øli bezpeƒç√≠." },
  ]
};

export default function IdentifikaceSection() {
  const [form, setForm] = useState({
    evidencni: "RZ-2025-001",
    objekt: "",
    adresa: "",
    objednatel: "",
    typRevize: "V√Ωchoz√≠",
    sit: "TN-C",
    voltage: "",
    date_start: "",
    date_end: "",
    date_created: "",
    protection_basic: [] as string[],
    protection_fault: [] as string[],
    protection_additional: [] as string[],
    documentation: "",
    environment: "",
    extraNotes: ""
  });

  const toggleProtection = (group: "basic" | "fault" | "additional", value: string) => {
    const current = form[`protection_${group}`];
    const updated = current.includes(value)
      ? current.filter((v: string) => v !== value)
      : [...current, value];
    setForm({ ...form, [`protection_${group}`]: updated });
  };

  return (
    <div className="bg-white shadow-md rounded p-6 space-y-6">
      <h2 className="text-2xl font-bold text-blue-800">üßæ Identifikace</h2>

      {/* Z√ÅKLADN√ç √öDAJE */}
      <div className="grid md:grid-cols-2 gap-4">
        <div>
          <label className="font-semibold">Evidenƒçn√≠ ƒç√≠slo</label>
          <input type="text" value={form.evidencni} readOnly className="p-2 border rounded w-full bg-gray-100" />
        </div>
        <div>
          <label className="font-semibold">Revidovan√Ω objekt</label>
          <input type="text" className="p-2 border rounded w-full" value={form.objekt} onChange={e => setForm({ ...form, objekt: e.target.value })} />
        </div>
        <div>
          <label className="font-semibold">Adresa</label>
          <input type="text" className="p-2 border rounded w-full" value={form.adresa} onChange={e => setForm({ ...form, adresa: e.target.value })} />
        </div>
        <div>
          <label className="font-semibold">Objednatel</label>
          <input type="text" className="p-2 border rounded w-full" value={form.objednatel} onChange={e => setForm({ ...form, objednatel: e.target.value })} />
        </div>
        <div>
          <label className="font-semibold">Typ revize</label>
          <select className="p-2 border rounded w-full" value={form.typRevize} onChange={e => setForm({ ...form, typRevize: e.target.value })}>
            {revisionTypes.map(opt => <option key={opt}>{opt}</option>)}
          </select>
        </div>
        <div>
          <label className="font-semibold">Druh s√≠tƒõ</label>
          <select className="p-2 border rounded w-full" value={form.sit} onChange={e => setForm({ ...form, sit: e.target.value })}>
            {networkTypes.map(opt => <option key={opt}>{opt}</option>)}
          </select>
        </div>
        <div>
          <label className="font-semibold">Jmenovit√© napƒõt√≠</label>
          <input list="voltages" className="p-2 border rounded w-full" value={form.voltage} onChange={e => setForm({ ...form, voltage: e.target.value })} />
          <datalist id="voltages">{voltageOptions.map(v => <option key={v} value={v} />)}</datalist>
        </div>
      </div>

      {/* DATUMY */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <div>
          <label className="font-semibold">Zah√°jen√≠ revize</label>
          <input type="date" className="p-2 border rounded w-full" value={form.date_start} onChange={e => setForm({ ...form, date_start: e.target.value })} />
        </div>
        <div>
          <label className="font-semibold">Ukonƒçen√≠ revize</label>
          <input type="date" className="p-2 border rounded w-full" value={form.date_end} onChange={e => setForm({ ...form, date_end: e.target.value })} />
        </div>
        <div>
          <label className="font-semibold">Vypracov√°n√≠ revize</label>
          <input type="date" className="p-2 border rounded w-full" value={form.date_created} onChange={e => setForm({ ...form, date_created: e.target.value })} />
        </div>
      </div>

      {/* NORMY */}
      <NormsSection />

      {/* OCHRANY */}
      {["basic", "fault", "additional"].map((group) => (
        <div key={group}>
          <label className="font-semibold block mb-2 capitalize">
            {group === "basic" && "Z√°kladn√≠ ochrana"}
            {group === "fault" && "Ochrana p≈ôi poru≈°e"}
            {group === "additional" && "Dopl≈àkov√° ochrana"}
          </label>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
            {protectionOptions[group as keyof typeof protectionOptions].map((p) => (
              <label key={p.label} className="flex items-center gap-2">
                <input type="checkbox" checked={form[`protection_${group}`].includes(p.label)} onChange={() => toggleProtection(group as any, p.label)} />
                <Tooltip text={p.tooltip}>
                  <span className="underline cursor-help">{p.label}</span>
                </Tooltip>
              </label>
            ))}
          </div>
        </div>
      ))}

      {/* DOKLADY */}
      <div>
        <label className="font-semibold">Projektov√° dokumentace</label>
        <input type="text" className="p-2 border rounded w-full" value={form.documentation} onChange={e => setForm({ ...form, documentation: e.target.value })} />
      </div>
      <div>
        <label className="font-semibold">Posouzen√≠ vnƒõj≈°√≠ch vliv≈Ø</label>
        <input type="text" className="p-2 border rounded w-full" value={form.environment} onChange={e => setForm({ ...form, environment: e.target.value })} />
      </div>
      <div>
        <label className="font-semibold">Dal≈°√≠ p√≠semn√© podklady</label>
        <textarea rows={4} className="p-2 border rounded w-full" value={form.extraNotes} onChange={e => setForm({ ...form, extraNotes: e.target.value })} />
      </div>

      {/* TLAƒå√çTKO POKRAƒåOVAT */}
      <div className="text-right">
        <button className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 transition">
          Pokraƒçovat ‚Üí
        </button>
      </div>
    </div>
  );
}
