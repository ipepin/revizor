"""sync models after baseline

Revision ID: e66c54f36cfe
Revises: 3ca5003c4b05
Create Date: 2025-08-10 07:50:18.950904

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'e66c54f36cfe'
down_revision: Union[str, Sequence[str], None] = '3ca5003c4b05'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None
from sqlalchemy import inspect

def upgrade():
    bind = op.get_bind()
    insp = inspect(bind)

    # ⚠️ ZÁMĚRNĚ ŽÁDNÉ změny na `component_models`
    # (autogenerate tam přidal drop bezejmenného constraintu, to v SQLite nelze)

    # Volitelně: jen zajistit, že `devices` má požadované sloupce
    if "devices" in insp.get_table_names():
        existing = {c["name"] for c in insp.get_columns("devices")}
        with op.batch_alter_table("devices", schema=None) as batch:
            if "name" not in existing:
                batch.add_column(sa.Column("name", sa.String(), nullable=True))
            if "manufacturer" not in existing:
                batch.add_column(sa.Column("manufacturer", sa.String(), nullable=True))
            if "model" not in existing:
                batch.add_column(sa.Column("model", sa.String(), nullable=True))
            if "trida" not in existing:
                batch.add_column(sa.Column("trida", sa.String(), nullable=True))
            if "ip" not in existing:
                batch.add_column(sa.Column("ip", sa.String(), nullable=True))
            if "note" not in existing:
                batch.add_column(sa.Column("note", sa.Text(), nullable=True))


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.alter_column('email',
               existing_type=sa.VARCHAR(),
               nullable=True)

    with op.batch_alter_table('manufacturers', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key(None, 'component_types', ['type_id'], ['id'])

    with op.batch_alter_table('devices', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='unique')
        batch_op.drop_index(batch_op.f('ix_devices_id'))
        batch_op.alter_column('ip',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
        batch_op.alter_column('trida',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
        batch_op.alter_column('model',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
        batch_op.alter_column('manufacturer',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
        batch_op.alter_column('name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               nullable=True)
        batch_op.alter_column('id',
               existing_type=sa.INTEGER(),
               nullable=True,
               autoincrement=True)

    with op.batch_alter_table('component_models', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key(None, 'manufacturers', ['manufacturer_id'], ['id'])

    # ### end Alembic commands ###
